name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Manual triggering for testing
    
jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install -r test-requirements.txt

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          python -m unittest discover -s tests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push auth-service image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.auth
          push: true
          tags: chiungdlee/auth-service:latest

      - name: Build and push urlinfo-service image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.urlinfo
          push: true
          tags: chiungdlee/urlinfo-service:latest

      - name: Build and push update-service image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.update
          push: true
          tags: chiungdlee/update-service:latest

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform/environments/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform/environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

      - name: Set up Azure CLI
        uses: azure/setup-azcli@v1

      - name: Log in to Azure
        run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_NAME }}

      - name: Deploy auth-service
        run: |
          helm upgrade --install auth-service helm/charts/auth --set image.repository=chiungdlee/auth-service,image.tag=latest

      - name: Deploy urlinfo-service
        run: |
          helm upgrade --install urlinfo-service helm/charts/urlinfo --set image.repository=chiungdlee/urlinfo-service,image.tag=latest

      - name: Deploy update-service
        run: |
          helm upgrade --install update-service helm/charts/update --set image.repository=chiungdlee/update-service,image.tag=latest

      - name: Apply CronJob
        run: kubectl apply -f cronjob.yaml

      - name: Apply HPA
        run: kubectl apply -f helm/charts/urlinfo/templates/hpa.yaml

      # - name: Set up Ansible
      #   uses: dawidd6/action-install-ansible@v2

      # - name: Run Ansible playbook
      #   run: |
      #     ansible-galaxy install -r ansible/requirements.yml
      #     ansible-playbook ansible/playbook.yml -i ansible/inventory/hosts
      #   env:
      #     ANSIBLE_HOST_KEY_CHECKING: "False"
      #     DB_URL: ${{ secrets.DB_URL }}
      #     AUTH_SERVICE_URL: ${{ secrets.AUTH_SERVICE_URL }}
      #     UPDATE_SERVICE_URL: ${{ secrets.UPDATE_SERVICE_URL }}

  post-deployment-tests:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
          pip install -r test-requirements.txt

      - name: Run functional tests
        run: |
          source .venv/bin/activate
          python -m unittest discover -s tests/functional

      - name: Set up JMeter
        uses: lilydjwg/nvchecker@v1
        with:
          args: |
            sudo apt-get install jmeter -y

      - name: Run JMeter tests
        run: |
          jmeter -n -t tests/performance_test.jmx -l tests/performance_test.jtl
