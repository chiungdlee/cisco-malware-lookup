import unittest
from flask_jwt_extended import create_access_token
from src.app import app, db, url_db

class URLInfoTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app
        self.app.config['TESTING'] = True
        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        self.app.config['JWT_SECRET_KEY'] = 'test_jwt_secret_key'
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()
        self.client = self.app.test_client()
        # Clear the URL database for each test
        url_db.update_urls([])

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def get_auth_header(self):
        # Helper method to generate a valid auth header
        access_token = create_access_token(identity='test')
        return {
            'Authorization': f'Bearer {access_token}'
        }

    def test_url_info_safe(self):
        headers = self.get_auth_header()
        response = self.client.get('/v1/urlinfo/http://example.com', headers=headers)
        data = response.get_json()
        self.assertEqual(response.status_code, 200)
        self.assertEqual(data['url'], 'http://example.com')
        self.assertTrue(data['safe'])

    def test_url_info_malware(self):
        url_db.update_urls(['http://malware.com'])
        headers = self.get_auth_header()
        response = self.client.get('/v1/urlinfo/http://malware.com', headers=headers)
        data = response.get_json()
        self.assertEqual(response.status_code, 200)
        self.assertEqual(data['url'], 'http://malware.com')
        self.assertFalse(data['safe'])

    def test_url_info_no_auth(self):
        response = self.client.get('/v1/urlinfo/http://example.com')
        data = response.get_json()
        self.assertEqual(response.status_code, 401)
        self.assertEqual(data['msg'], 'Missing Authorization Header')

if __name__ == '__main__':
    unittest.main()
