import unittest
from unittest.mock import patch
from src.models import db, MalwareURL
from src.url_db import URLDatabase
from src.update_service import UpdateService
from src.app import app

class UpdateServiceTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app
        self.app.config['TESTING'] = True
        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()
        self.db = URLDatabase(db)
        self.service = UpdateService(self.db)

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    @patch('src.update_service.requests.get')
    def test_fetch_updates(self, mock_get):
        mock_response = mock_get.return_value
        mock_response.status_code = 200
        mock_response.json.return_value = ["http://malware.com", "http://spyware.com"]

        new_urls = self.service.fetch_updates()
        self.assertIn("http://malware.com", new_urls)
        self.assertIn("http://spyware.com", new_urls)

    def test_update_service_run(self):
        new_urls = ["http://malware.com", "http://spyware.com"]
        self.service.db.update_urls(new_urls)
        self.assertFalse(self.db.is_safe("http://malware.com"))
        self.assertFalse(self.db.is_safe("http://spyware.com"))

if __name__ == '__main__':
    unittest.main()
