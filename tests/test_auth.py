import unittest
from flask import current_app
from flask_jwt_extended import decode_token
from src.app import app, db

class AuthTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app
        self.app.config['TESTING'] = True
        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        self.app.config['JWT_SECRET_KEY'] = '5KfTzB7LXQ8rJHFs76k_d4MxPs9GqzXj4NDb7GpZZWw'
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()
        self.client = self.app.test_client()

    def tearDown(self):
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def test_login(self):
        response = self.client.post('/v1/login', json={
            'username': 'test',
            'password': 'test'
        })
        data = response.get_json()
        self.assertEqual(response.status_code, 200)
        self.assertIn('access_token', data)
        
        # Verify the JWT token
        token = data['access_token']
        decoded_token = decode_token(token)
        self.assertEqual(decoded_token['sub'], 'test')

    def test_login_invalid_credentials(self):
        response = self.client.post('/v1/login', json={
            'username': 'invalid',
            'password': 'invalid'
        })
        data = response.get_json()
        self.assertEqual(response.status_code, 401)
        self.assertEqual(data['msg'], 'Bad username or password')

    def test_login_missing_credentials(self):
        response = self.client.post('/v1/login', json={
            'username': '',
            'password': ''
        })
        data = response.get_json()
        self.assertEqual(response.status_code, 400)
        self.assertEqual(data['msg'], 'Missing username or password')

if __name__ == '__main__':
    unittest.main()
