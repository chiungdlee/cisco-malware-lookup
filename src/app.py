import sys
from os.path import dirname, abspath
from flask import Flask, jsonify
from flask_jwt_extended import JWTManager, jwt_required
from src.url_db import URLDatabase
from src.config import SQLALCHEMY_DATABASE_URI, JWT_SECRET_KEY
from src.models import db
from src.auth import auth_bp

# Add the parent directory to sys.path
sys.path.insert(0, dirname(dirname(abspath(__file__))))

# Initialize the Flask application
app = Flask(__name__)

# Set up the configuration for the database
app.config['SQLALCHEMY_DATABASE_URI'] = SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = JWT_SECRET_KEY  # Set the secret key for JWT

# Initialize the database with the Flask app
db.init_app(app)

# Initialize the JWT manager
jwt = JWTManager(app)

# Register the auth blueprint
app.register_blueprint(auth_bp, url_prefix='/v1')

# Initialize the URL database
url_db = URLDatabase(db)

@app.route('/v1/urlinfo/<path:resource_url>', methods=['GET'])
@jwt_required()
def url_info(resource_url: str):
    """
    Endpoint to check if a URL is safe.
    :param resource_url: The URL to check.
    :return: JSON response indicating if the URL is safe.
    """
    safe = url_db.is_safe(resource_url)
    return jsonify({'url': resource_url, 'safe': safe})

if __name__ == '__main__':
    with app.app_context():
        # Create the database tables if they don't exist
        db.create_all()
    app.run(host='0.0.0.0', port=5000)
